<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tuning on</title><link>https://kubedl.io/tuning/</link><description>Recent content in Tuning on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://kubedl.io/tuning/index.xml" rel="self" type="application/rss+xml"/><item><title>Startup flags</title><link>https://kubedl.io/tuning/flags/</link><pubDate>Thu, 01 Apr 2021 15:26:42 -0700</pubDate><guid>https://kubedl.io/tuning/flags/</guid><description> Flag Name Type Description Default metrics-addr string The address the metric endpoint binds to 8088 enable-leader-election bool Enable leader election for controller manager. Enabling this will ensure there is only one active controller manager. false enable-grpc-probe-in-suggestion bool Enable Pod readiness/liveness probes in samplings true</description></item><item><title>Developer Guide</title><link>https://kubedl.io/tuning/developer-guide/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://kubedl.io/tuning/developer-guide/</guid><description>There&amp;rsquo;s a Makefile in the root folder which describes the options to build and install. Here are some common ones:
Build the controller manager binary make manager Run the tests make test Generate manifests, e.g., CRD YAML. make manifests Build Morphling component images. make docker-build Push Morphling component images. make docker-push Generate the helm chart Generate the helm chart, the helm chart will be generated under helm/morphling</description></item><item><title>Introduction</title><link>https://kubedl.io/tuning/intro/</link><pubDate>Thu, 12 Nov 2020 15:22:20 +0100</pubDate><guid>https://kubedl.io/tuning/intro/</guid><description>KubeDL automatically tunes the best container-level configurations before an ML model is deployed as inference services. This auto-configuration workflow is developed as an independent project&amp;mdash;Morphling. Github →
Morphling Overview Morphling tunes the optimal configurations for your ML/DL model serving deployments. It searches the best container-level configurations (e.g., resource allocations and runtime parameters) by empirical trials, where a few configurations are sampled for performance evaluation.
Morphling Workflow. Features Key benefits include:</description></item><item><title>How to Debug</title><link>https://kubedl.io/tuning/debug-guide/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://kubedl.io/tuning/debug-guide/</guid><description>DEBUG with local process Credentials
To run Morphling locally, you must have the access to the kubernetes cluster, the credential is a distributed kube-config cert file.
Install CRDs and run Morphling components
# kube-config cert file export KUBECONFIG=${PATH_TO_CONFIG} # install CRDs make install # install basic components, e.g., PV, mysql-db kubectl apply -f manifests/configmap kubectl apply -f manifests/pv kubectl apply -f manifests/mysql-db kubectl apply -f manifests/db-manager # run Morphling controller locally make run Troubleshoot with Pod The followings are the steps to Troubleshoot Morphling using Pod.</description></item><item><title>Workflow</title><link>https://kubedl.io/tuning/design/</link><pubDate>Thu, 12 Nov 2020 15:22:20 +0100</pubDate><guid>https://kubedl.io/tuning/design/</guid><description>This diagram illustrates the workflow of a ProflingExperiment.
Morphling Workflow. A user submits a ProflingExperiment via a RPC or front-end UI interface, specifying the ML model, tunable configuration parameters, optimization objectives, and sampling budgets.
Within the sampling budget, Morphling iteratively communicates with the algorithm server to get the next configuration for sampling.
Then Morphling starts a Trial to evaluate that sampling.
For each Trial, a model serving inference instance Deployment is launched, and its “readiness” is reported to trigger a client-side RPS stress-test Job.</description></item><item><title>Install Using Yaml</title><link>https://kubedl.io/tuning/install-using-yaml/</link><pubDate>Sat, 12 Jun 2021 17:46:36 -0700</pubDate><guid>https://kubedl.io/tuning/install-using-yaml/</guid><description>Install CRDs From git root directory, run
kubectl apply -f config/crd/bases Install Morphling Components The official Morphling component images are hosted under docker hub.
kubectl create namespace morphling-system kubectl apply -f manifests/configmap kubectl apply -f manifests/controllers kubectl apply -f manifests/pv kubectl apply -f manifests/mysql-db kubectl apply -f manifests/db-manager kubectl apply -f manifests/algorithm To deploy Morphling UI Go →, run
kubectl apply -f manifests/ui By default, Morphling will be installed under morphling-system namespace.</description></item><item><title>Install Using Helm</title><link>https://kubedl.io/tuning/install-using-helm/</link><pubDate>Sat, 12 Jun 2021 17:46:36 -0700</pubDate><guid>https://kubedl.io/tuning/install-using-helm/</guid><description>Install Helm Helm is a package manager for Kubernetes. A demo installation on MacOS:
brew install helm Check the helm website for more details.
Install Morphling From the root directory, run
helm install morphling ./helm/morphling --create-namespace -n morphling-system You can override default values defined in values.yaml with --set flag. For example, set the custom cpu/memory resource:
helm install morphling ./helm/morphling --create-namespace -n morphling-system --set resources.</description></item><item><title>Morphling UI</title><link>https://kubedl.io/tuning/ui/</link><pubDate>Sat, 12 Jun 2021 17:46:36 -0700</pubDate><guid>https://kubedl.io/tuning/ui/</guid><description>Deploy Morphling UI Morphling UI is built upon Ant Design. If you are installing Morphling with Yaml files, from the root directory, run
kubectl apply -f manifests/ui Or, if you are installing Morphling with Helm chart, Morphling UI is automatically deployed.
Morphling UI. Check if all Morphling UI is running successfully:
kubectl -n morphling-system get svc morphling-ui Expected output:
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE morphling-ui NodePort 10.</description></item><item><title>Quick Start</title><link>https://kubedl.io/tuning/quick-start/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://kubedl.io/tuning/quick-start/</guid><description>This example demonstrates how to tune the configuration for a Mobilenet model deployed with Tensorflow Serving under Morphling.
For demonstration, we choose two configurations to tune: the first one the CPU cores (resource allocation), and the second one is maximum serving batch size (runtime parameter). We use grid search for configuration sampling.
Submit the configuration tuning experiment kubectl -n morphling-system apply -f https://raw.githubusercontent.com/alibaba/morphling/main/examples/experiment/experiment-mobilenet-grid.yaml Monitor the tuning experiment status kubectl get -n morphling-system pe kubectl describe -n morphling-system pe Monitor sampling trials (performance test) kubectl -n morphling-system get trial Get the searched optimal configuration kubectl -n morphling-system get pe Expected output:</description></item></channel></rss>